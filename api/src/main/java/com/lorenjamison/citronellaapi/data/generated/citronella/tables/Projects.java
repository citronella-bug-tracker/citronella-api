/*
 * This file is generated by jOOQ.
 */
package com.lorenjamison.citronellaapi.data.generated.citronella.tables;


import com.lorenjamison.citronellaapi.data.generated.citronella.Citronella;
import com.lorenjamison.citronellaapi.data.generated.citronella.Keys;
import com.lorenjamison.citronellaapi.data.generated.citronella.tables.records.ProjectsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Projects extends TableImpl<ProjectsRecord> {

    private static final long serialVersionUID = 1707999265;

    /**
     * The reference instance of <code>citronella.projects</code>
     */
    public static final Projects PROJECTS = new Projects();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectsRecord> getRecordType() {
        return ProjectsRecord.class;
    }

    /**
     * The column <code>citronella.projects.id</code>.
     */
    public final TableField<ProjectsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>citronella.projects.name</code>.
     */
    public final TableField<ProjectsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>citronella.projects</code> table reference
     */
    public Projects() {
        this(DSL.name("projects"), null);
    }

    /**
     * Create an aliased <code>citronella.projects</code> table reference
     */
    public Projects(String alias) {
        this(DSL.name(alias), PROJECTS);
    }

    /**
     * Create an aliased <code>citronella.projects</code> table reference
     */
    public Projects(Name alias) {
        this(alias, PROJECTS);
    }

    private Projects(Name alias, Table<ProjectsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Projects(Name alias, Table<ProjectsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Projects(Table<O> child, ForeignKey<O, ProjectsRecord> key) {
        super(child, key, PROJECTS);
    }

    @Override
    public Schema getSchema() {
        return Citronella.CITRONELLA;
    }

    @Override
    public Identity<ProjectsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROJECTS;
    }

    @Override
    public UniqueKey<ProjectsRecord> getPrimaryKey() {
        return Keys.KEY_PROJECTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProjectsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectsRecord>>asList(Keys.KEY_PROJECTS_PRIMARY);
    }

    @Override
    public Projects as(String alias) {
        return new Projects(DSL.name(alias), this);
    }

    @Override
    public Projects as(Name alias) {
        return new Projects(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Projects rename(String name) {
        return new Projects(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Projects rename(Name name) {
        return new Projects(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
