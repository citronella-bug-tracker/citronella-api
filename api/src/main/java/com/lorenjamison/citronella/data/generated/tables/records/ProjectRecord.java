/*
 * This file is generated by jOOQ.
 */
package com.lorenjamison.citronella.data.generated.tables.records;


import com.lorenjamison.citronella.data.generated.tables.Project;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectRecord extends UpdatableRecordImpl<ProjectRecord> implements Record5<Long, String, String, Byte, ULong> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>citronella.project.id</code>.
     */
    public ProjectRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>citronella.project.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>citronella.project.name</code>.
     */
    public ProjectRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>citronella.project.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>citronella.project.issue_prefix</code>.
     */
    public ProjectRecord setIssuePrefix(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>citronella.project.issue_prefix</code>.
     */
    public String getIssuePrefix() {
        return (String) get(2);
    }

    /**
     * Setter for <code>citronella.project.archived</code>.
     */
    public ProjectRecord setArchived(Byte value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>citronella.project.archived</code>.
     */
    public Byte getArchived() {
        return (Byte) get(3);
    }

    /**
     * Setter for <code>citronella.project.next_issue_num</code>.
     */
    public ProjectRecord setNextIssueNum(ULong value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>citronella.project.next_issue_num</code>.
     */
    public ULong getNextIssueNum() {
        return (ULong) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, Byte, ULong> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, String, String, Byte, ULong> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Project.PROJECT.ID;
    }

    @Override
    public Field<String> field2() {
        return Project.PROJECT.NAME;
    }

    @Override
    public Field<String> field3() {
        return Project.PROJECT.ISSUE_PREFIX;
    }

    @Override
    public Field<Byte> field4() {
        return Project.PROJECT.ARCHIVED;
    }

    @Override
    public Field<ULong> field5() {
        return Project.PROJECT.NEXT_ISSUE_NUM;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getIssuePrefix();
    }

    @Override
    public Byte component4() {
        return getArchived();
    }

    @Override
    public ULong component5() {
        return getNextIssueNum();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getIssuePrefix();
    }

    @Override
    public Byte value4() {
        return getArchived();
    }

    @Override
    public ULong value5() {
        return getNextIssueNum();
    }

    @Override
    public ProjectRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ProjectRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ProjectRecord value3(String value) {
        setIssuePrefix(value);
        return this;
    }

    @Override
    public ProjectRecord value4(Byte value) {
        setArchived(value);
        return this;
    }

    @Override
    public ProjectRecord value5(ULong value) {
        setNextIssueNum(value);
        return this;
    }

    @Override
    public ProjectRecord values(Long value1, String value2, String value3, Byte value4, ULong value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProjectRecord
     */
    public ProjectRecord() {
        super(Project.PROJECT);
    }

    /**
     * Create a detached, initialised ProjectRecord
     */
    public ProjectRecord(Long id, String name, String issuePrefix, Byte archived, ULong nextIssueNum) {
        super(Project.PROJECT);

        setId(id);
        setName(name);
        setIssuePrefix(issuePrefix);
        setArchived(archived);
        setNextIssueNum(nextIssueNum);
    }
}
