/*
 * This file is generated by jOOQ.
 */
package com.lorenjamison.citronella.data.generated.tables;


import com.lorenjamison.citronella.data.generated.Citronella;
import com.lorenjamison.citronella.data.generated.Keys;
import com.lorenjamison.citronella.data.generated.tables.records.SprintRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sprint extends TableImpl<SprintRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>citronella.sprint</code>
     */
    public static final Sprint SPRINT = new Sprint();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SprintRecord> getRecordType() {
        return SprintRecord.class;
    }

    /**
     * The column <code>citronella.sprint.id</code>.
     */
    public final TableField<SprintRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>citronella.sprint.name</code>.
     */
    public final TableField<SprintRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>citronella.sprint.project_id</code>.
     */
    public final TableField<SprintRecord, Long> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>citronella.sprint.start_date</code>.
     */
    public final TableField<SprintRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>citronella.sprint.end_date</code>.
     */
    public final TableField<SprintRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>citronella.sprint.status</code>.
     */
    public final TableField<SprintRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.field("'NOT_STARTED'", SQLDataType.VARCHAR)), this, "");

    private Sprint(Name alias, Table<SprintRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sprint(Name alias, Table<SprintRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>citronella.sprint</code> table reference
     */
    public Sprint(String alias) {
        this(DSL.name(alias), SPRINT);
    }

    /**
     * Create an aliased <code>citronella.sprint</code> table reference
     */
    public Sprint(Name alias) {
        this(alias, SPRINT);
    }

    /**
     * Create a <code>citronella.sprint</code> table reference
     */
    public Sprint() {
        this(DSL.name("sprint"), null);
    }

    public <O extends Record> Sprint(Table<O> child, ForeignKey<O, SprintRecord> key) {
        super(child, key, SPRINT);
    }

    @Override
    public Schema getSchema() {
        return Citronella.CITRONELLA;
    }

    @Override
    public Identity<SprintRecord, Long> getIdentity() {
        return (Identity<SprintRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SprintRecord> getPrimaryKey() {
        return Keys.KEY_SPRINT_PRIMARY;
    }

    @Override
    public List<UniqueKey<SprintRecord>> getKeys() {
        return Arrays.<UniqueKey<SprintRecord>>asList(Keys.KEY_SPRINT_PRIMARY);
    }

    @Override
    public List<ForeignKey<SprintRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SprintRecord, ?>>asList(Keys.SPRINT_FK);
    }

    private transient Project _project;

    public Project project() {
        if (_project == null)
            _project = new Project(this, Keys.SPRINT_FK);

        return _project;
    }

    @Override
    public Sprint as(String alias) {
        return new Sprint(DSL.name(alias), this);
    }

    @Override
    public Sprint as(Name alias) {
        return new Sprint(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sprint rename(String name) {
        return new Sprint(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sprint rename(Name name) {
        return new Sprint(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Long, LocalDate, LocalDate, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
